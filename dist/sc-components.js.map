{"version":3,"sources":["index.js","confirm/confirm.js","dropdown/dropdown.js","enter/enter.js","form-input/form-input.js","list/list.js","listing/listing.js"],"names":[],"mappingsnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sc-components.js","sourcesContent":["'use strict';\n\nangular.module('sc-components', [\n  'sc-confirm',\n  'sc-dropdown',\n  'sc-enter',\n  'sc-list',\n  'sc-listing'\n]);\n","'use strict';\n\n/**\n * sc-confirm\n *\n * Similar to window.confirm but with modal window\n *\n * Dependencies\n *\n *    ui.bootstrap\n *\n * Make sure you include the source files of ui.bootstrap.modal\n *\n * Usage\n *\n *  <a sc-confirm=\"remove()\"\n *    sc-confirm-message=\"Are you sure custom message?\"\n *    sc-on-cancel=\"cancel()\"\n *    template-url=\"'/templates/confirm.html'\"\n *    btn-placement=\"'left'\"\n *    item=\"resource\">\n *  </a>\n */\n\nangular.module('sc-confirm', [\n  'ui.bootstrap'\n])\n\n/**\n * Constants\n */\n\n.constant('scConfirmDefaults', {\n  message: 'Are you sure ?',\n  btnPlacement: 'right'\n})\n\n.directive('scConfirm', [\n  '$modal', '$compile', '$parse', '$http', '$q', '$templateCache', 'scConfirmDefaults',\n  function ($modal, $compile, $parse, $http, $q, $templateCache, defaults) {\n    return {\n      restrict: 'A',\n      scope: {\n        scConfirm: '&',\n        scOnCancel: '&'\n      },\n      link: function(scope, element, attrs) {\n        var isDefined = angular.isDefined;\n        var deferred = $q.defer();\n        var promise = deferred.promise;\n        var validPlacements = ['left', 'center', 'right'];\n        var btnPlacement;\n        var template;\n        var templateUrl;\n\n        // Parse attrs\n\n        // template and template-url\n        if (isDefined(attrs.template)) {\n          template = scope.$parent.$eval(attrs.template);\n          deferred.resolve(template);\n        } else if (isDefined(attrs.templateUrl)) {\n          templateUrl = scope.$parent.$eval(attrs.templateUrl);\n          $http.get(templateUrl, { cache: $templateCache })\n            .success(function (html) {\n              deferred.resolve(html);\n            })\n            .error(deferred.reject);\n        } else {\n          deferred.resolve('');\n        }\n\n        // btn-placement\n        if (isDefined(attrs.btnPlacement)) {\n          btnPlacement = scope.$parent.$eval(attrs.btnPlacement);\n        }\n\n        if (!~validPlacements.indexOf(btnPlacement)) {\n          btnPlacement = defaults.btnPlacement;\n        }\n\n        promise.then(function (tpl) {\n          var message = attrs.scConfirmMessage || defaults.message;\n          var modalHtml = [\n            '<div class=\"modal-header\">',\n            '  <button type=\"button\" class=\"close\" ng-click=\"cancel()\" aria-hidden=\"true\">&times;</button>',\n            '  <h4 class=\"modal-title\">'+ message +'</h4>',\n            '</div>',\n            '<div class=\"modal-body\">',\n            '  '+ tpl +'&nbsp;',\n            '</div>',\n            '<div class=\"modal-footer sc-'+ btnPlacement +'\">',\n            '  <button class=\"btn btn-primary\" ng-click=\"ok()\">Yes</button>',\n            '  <button class=\"btn btn-link\" ng-click=\"cancel()\">Cancel</button>',\n            '</div>'\n          ].join('\\n');\n\n          element.bind('click', function () {\n            var modalInstance = $modal.open({\n              template: modalHtml,\n              controller: 'ModalInstanceCtrl',\n              scope: scope.$parent,\n              resolve: {\n                scOnCancel: function () { return scope.scOnCancel; }\n              }\n            });\n\n            modalInstance.result.then(scope.scConfirm);\n          });\n        });\n      }\n    };\n  }\n])\n\n/**\n * scConfirm Modal Controller\n */\n\n.controller('ModalInstanceCtrl', [\n  '$scope', '$modalInstance', 'scOnCancel',\n  function ($scope, $modalInstance, scOnCancel) {\n    $scope.ok = $modalInstance.close;\n    $scope.cancel = function () {\n      $scope.$parent.$eval(scOnCancel);\n      $modalInstance.dismiss('cancel');\n    };\n  }\n]);\n\n// TODO: give a provider\n","'use strict';\n\n/**\n * sc-dropdown\n *\n * dropdowns\n *\n * Dependencies\n *\n *    sc-listing\n *    ui.bootstrap\n *\n * Usage:\n *\n *    <sc-dropdown\n *      items=\"items\"\n *      attribute=\"'name'\"\n *      default=\"expression\"\n *      label=\"'Choose assignee'\"\n *      type=\"'simple'\" // or 'single' or 'split'\n *      on-select=\"doSomething\">\n *    </sc-dropdown>\n *\n * There are 3 types of dropdowns available.\n *   - simple: a simple anchor link (default)\n *   - single: a button with dropdown\n *   - split: a button with split caret as dropdown\n */\n\nangular.module('sc-dropdown', [\n  'sc-listing',\n  'ui.bootstrap'\n])\n\n/**\n * Constants\n */\n\n.constant('scDropdownDefaults', {\n  btnClass: 'btn btn-',\n  btnDefault: 'link',\n  type: 'simple',\n  label: 'Choose from the list'\n})\n\n.directive('scDropdown', ['$compile', 'scDropdownDefaults', function ($compile, defaults) {\n  return {\n    restrict: 'E',\n    scope: {\n      items: '='\n    },\n    link: function (scope, element, attrs) {\n      var isDefined = angular.isDefined;\n      var isFunction = angular.isFunction;\n      var validTypes = ['simple', 'single', 'split'];\n      var dropdown = {};\n      var labelTpl;\n\n      // defaults\n      var btnClass = defaults.btnClass;\n      var btnDefault = defaults.btnDefault;\n      var type = defaults.type;\n      var label = defaults.label;\n\n      // Parse\n\n      // attribute\n      var attribute = scope.$parent.$eval(attrs.attribute);\n\n      // type\n      if (isDefined(attrs.type)) {\n        type = scope.$parent.$eval(attrs.type);\n        type = !~validTypes.indexOf(type)\n          ? 'simple'\n          : type;\n      }\n\n      // label\n      if (isDefined(attrs.label)) {\n        scope.label = scope.$parent.$eval(attrs.label);\n      }\n\n      // default\n      if (isDefined(attrs.default)) {\n        label = scope.$parent.$eval(attrs.default);\n        scope.item = isFunction(label)\n          ? label()\n          : label;\n        label = scope.item;\n      }\n      scope.label = scope.label || label;\n\n      // btn-class\n      if (isDefined(attrs.btnClass)) {\n        btnDefault = scope.$parent.$eval(attrs.btnClass);\n      }\n      btnClass = btnClass + btnDefault;\n\n      // on-select\n      var onSelect = scope.$parent.$eval(attrs.onSelect);\n\n      // Check if the items is an array of objects or strings\n      // and depending on that, build the template\n\n      if (typeof scope.items[0] !== 'string') {\n        labelTpl = '{{ item[\\''+ attribute +'\\'] || label }}';\n        scope.template = '<a href>{{ item[\\''+ attribute +'\\'] }}</a>';\n      } else {\n        labelTpl = '{{ item || label }}';\n        scope.template = '<a href>{{ item }}</a>';\n      }\n\n      scope.select = function (item) {\n        scope.item = item;\n        onSelect(item);\n      };\n\n      var listing = [\n        '  <sc-listing class=\"dropdown-menu\"',\n        '    items=\"items\"',\n        '    on-item-click=\"select\"',\n        '    template=\"template\">',\n        '  </sc-listing>'\n      ].join('');\n\n      dropdown.simple = [\n        '<span class=\"dropdown\">',\n        '  <a href class=\"dropdown-toggle\">',\n        '    ' + labelTpl,\n        '  </a>',\n        '  ' + listing,\n        '</span>'\n      ].join('');\n\n      dropdown.single = [\n        '<div class=\"btn-group\" dropdown>',\n        '  <button type=\"button\" class=\"'+ btnClass +' dropdown-toggle\">',\n        '    ' + labelTpl + ' <span class=\"caret\"></span>',\n        '  </button>',\n        '  ' + listing,\n        '</div>'\n      ].join('');\n\n      dropdown.split = [\n        '<div class=\"btn-group\" dropdown>',\n        '  <button type=\"button\" class=\"'+ btnClass +'\">'+ labelTpl +'</button>',\n        '  <button type=\"button\" class=\"'+ btnClass +' dropdown-toggle\">',\n        '    <span class=\"caret\"></span>',\n        '  </button>',\n        '  ' + listing,\n        '</div>'\n      ].join('');\n\n      element.replaceWith($compile(dropdown[type])(scope));\n    }\n  };\n}]);\n","'use strict';\n\n/*!\n * sc-enter\n * Copyright(c) 2014 Madhusudhan Srinivasa <madhu@changer.nl>\n * MIT Licensed\n */\n\n/**\n * sc-enter\n *\n * Usage:\n *\n *  <input sc-enter=\"search()\" type=\"text\" ng-model=\"term\">\n */\n\nangular.module('sc-enter', [])\n\n.directive('scEnter', function () {\n  return function (scope, element, attrs) {\n    element.bind('keydown keypress', function (event) {\n      if (event.which === 13) {\n        scope.$apply(function () {\n          scope.$eval(attrs.scEnter, {\n            'event': event\n          });\n        });\n\n        event.preventDefault();\n      }\n    });\n  };\n});\n","'use strict';\n\n/*!\n * sc-form-input\n *\n * Simple form fields\n *\n * Usage:\n *\n *    <sc-form-input\n *      input-type=\"'text'\" // 'textarea', 'password', 'email', etc\n *      type=\"'inline'\" // default is 'normal'\n *      editable=\"mode('edit')\"\n *      required=\"bool\"\n *      autofocus=\"bool\"\n *      read-only=\"bool\"\n *      ng-model=\"field\"\n *      label=\"'firstname'\"\n *      pattern=\"//\"\n *      min-length=\"10\"\n *      max-length=\"30\"\n *      rows=\"2\"\n *      cols=\"10\"\n *      placeholder=\"'Enter your firstname'\"\n *      >\n *    </sc-form-input>\n */\n\nangular.module('sc-form-input', [])\n\n/**\n * Constants\n */\n\n.constant('scFormInputDefaults', {\n  type: 'normal',\n  inputType: 'text',\n  required: false,\n  autofocus: false,\n  readOnly: false,\n  editable: true\n})\n\n.directive('scFormInput', ['$compile', 'scFormInputDefaults', function ($compile, defaults) {\n\n  var allowed = [\n\n  ];\n\n  return {\n    restrict: 'E',\n    scope: {\n\n    },\n    link: function (scope, element, attrs) {\n      var isDefined = angular.isDefined;\n      var isFunction = angular.isFunction;\n\n      // Parse attrs\n\n      // input-type (default is text)\n\n      // type\n\n      // editable\n\n      // required\n\n      // autofocus\n\n      // read-only\n\n      // ng-model\n\n      // label\n\n      // pattern\n\n      // min-length\n\n      // max-length\n\n      // rows\n\n      // cols\n\n      // placeholder\n\n      var template = [\n        '<div class=\"form-group sc-form-group\">',\n        '  <label for=\"inputEmail3\" class=\"col-sm-2 control-label\">Email</label>'\n      ];\n\n      template = template.concat([\n        '  <div class=\"col-sm-10\">'\n      ]);\n\n      template = template.concat([\n        '    <input type=\"email\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"Email\" ng-model=\"'+ attrs.ngModel +'\">'\n      ]);\n\n      template = template.concat([\n        '  </div>'\n      ]);\n\n      template = template.concat([\n        '</div>'\n      ]);\n\n      element.replaceWith($compile(template.join('\\n'))(scope));\n    }\n  };\n}])\n\n// TODO: give a provider\n","'use strict';\n\n/*!\n * sc-list\n * Copyright(c) 2014 Madhusudhan Srinivasa <madhu@changer.nl>\n * MIT Licensed\n */\n\n/**\n * sc-list\n *\n * Usage:\n *\n *    var list = new List(Item);\n *    list.fetch(); // or list.refresh();\n *    list.sort('name', -1);\n */\n\nangular.module('sc-list', [])\n\n/**\n * List defaults\n */\n\n.constant('scListDefaults', {\n  limit: 20,\n  page: 0,\n  sort_type: 1\n})\n\n.factory('scList', ['scListDefaults', function (defaults) {\n\n  /**\n   * List\n   *\n   * @param {Resource} Resource\n   * @param {Object} options\n   * @api public\n   */\n\n  function List (Resource, options) {\n    if (!Resource || Resource.prototype.constructor.name !== 'Resource') {\n      throw new Error('Resource must be an instance of $resource');\n    }\n\n    if (typeof Resource.query !== 'function') {\n      throw new Error('Resource must have a query function');\n    }\n\n    options = options || {};\n    this.options = {};\n    this.options.limit = options.limit || defaults.limit;\n    this.options.filter = options.filter;\n    this.options.page = options.page || defaults.page;\n    this.options.sort_by = options.sort_by;\n    this.options.sort_type = options.sort_type || defaults.sort_type;\n    this.Resource = Resource;\n  }\n\n  /**\n   * sort\n   *\n   * @param {String} field\n   * @param {Integer} type (1 or -1)\n   * @return {Array}\n   * @api public\n   */\n\n  List.prototype.sort = function (field, type) {\n    this.options.sort_type = parseInt(this.options.sort_type, 10) * -1;\n    return this.fetch({\n      sort_type: type * this.options.sort_type,\n      sort_by: field\n    });\n  };\n\n  /**\n   * goto\n   *\n   * @param {Number} page\n   * @return {Array}\n   * @api public\n   */\n\n  List.prototype.goto = function (page) {\n    this.options.page = parseInt(page, 10);\n    return this.fetch();\n  };\n\n  /**\n   * fetch\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   */\n\n  List.prototype.refresh =\n  List.prototype.fetch = function (options) {\n    options = options || {};\n    options.limit = options.limit || this.options.limit;\n    options.filter = options.filter || this.options.filter;\n    options.page = options.page || this.options.page;\n    options.sort_by = options.sort_by || this.options.sort_by;\n    options.sort_type = options.sort_type || this.options.sort_type;\n\n    this.options = options;\n    this.items = this.Resource.query(this.options);\n    this.$promise = this.items.$promise;\n    return this.items;\n  };\n\n  return List;\n}]);\n","'use strict';\n\n/*!\n * sc-listing\n * Copyright(c) 2014 Madhusudhan Srinivasa <madhu@changer.nl>\n * MIT Licensed\n */\n\n/**\n * sc-listing\n *\n * Usage:\n *\n *  <listing\n *    items=\"items\"\n *    on-item-click=\"showItem\"\n *    class=\"'items'\"\n *    item-class=\"'item'\"\n *    template-url=\"'/templates/list-item.html'\">\n *  </listing>\n *\n * it also takes `template` as an attribute which is just a template string\n */\n\nangular.module('sc-listing', [])\n\n.directive('scListing', function ($compile, $http, $q, $templateCache) {\n  return {\n    restrict: 'E',\n    scope: {\n      items: '='\n    },\n    link: function (scope, element, attrs) {\n      var isDefined = angular.isDefined;\n      var deferred = $q.defer();\n      var promise = deferred.promise;\n      var classes = ['list'];\n      var itemClass = ['list-item'];\n      var template;\n      var templateUrl;\n\n      // Parse attrs\n\n      // on-item-click\n      if (isDefined(attrs.onItemClick)) {\n        scope.onItemClick = scope.$parent.$eval(attrs.onItemClick);\n      }\n\n      // template and template-url\n      if (isDefined(attrs.template)) {\n        template = scope.$parent.$eval(attrs.template);\n        deferred.resolve(template);\n      } else if (isDefined(attrs.templateUrl)) {\n        templateUrl = scope.$parent.$eval(attrs.templateUrl);\n        $http.get(templateUrl, { cache: $templateCache })\n          .success(function (html) {\n            deferred.resolve(html);\n          })\n          .error(deferred.reject);\n      } else {\n        deferred.resolve('');\n      }\n\n      // class\n      if (isDefined(attrs.class)) {\n        classes.push(attrs.class);\n      }\n\n      // item-class\n      if (isDefined(attrs.itemClass)) {\n        itemClass.push(scope.$parent.$eval(attrs.itemClass));\n      }\n\n      classes = classes.join(' ');\n      itemClass = itemClass.join(' ');\n\n      promise.then(function (tpl) {\n        tpl = tpl || '{{ item | json }}';\n\n        var template = [\n          '<ul class=\"'+ classes +'\">',\n          '  <li class=\"'+ itemClass +'\" ng-repeat=\"item in items\" ng-click=\"onItemClick(item, $index)\">',\n          '    '+ tpl,\n          '  </li>',\n          '</ul>'\n        ].join('');\n\n        element.replaceWith($compile(template)(scope));\n      });\n    }\n  };\n});\n\n// TODO: give a provider to override defaults\n"],"sourceRoot":"/source/"}